<project default="all">
	<!-- You can change properties according to our project layout. 
		However, this default is recommended and 
		makes your tutor's life a lot easier. -->
	<property name="src-dir" location="./src" />
	<property name="bin-dir" location="./bin" />
	<property name="lib-dir" location="../lib" />
	<property name="dist-dir" location="./" />
	
	<property name="checkstyle-jar" location="${lib-dir}/checkstyle-6.12.1-all.jar" />
	
	<property name="junit-jar" location="${lib-dir}/junit-4.12.jar" />
	<property name="hamcrest-jar" location="${lib-dir}/hamcrest-core-1.3.jar" />
	
	<!-- Include the specific properties -->
	<property file="build.properties" />
	
	<!-- If you use third party libraries, you'll have to modify the classpath. -->
	<path id="classpath.base">
	</path>
	
	<!-- - - - - - - - - - - - - - - - - - - - - - - - - - - - -->
	<!--  Ideally, you'll never have to touch anything below.  -->
	<!-- - - - - - - - - - - - - - - - - - - - - - - - - - - - -->
	
	<path id="classpath.test">
		<pathelement location="${junit-jar}" />
		<pathelement location="${hamcrest-jar}" />
		<pathelement location="${bin-dir}" />
		<path refid="classpath.base" />
	</path>
	
	<path id="classpath.run">
		<pathelement location="${bin-dir}" />
		<path refid="classpath.base" />
	</path>
	
	<target name="checkstyle">
		<taskdef
			resource="com/puppycrawl/tools/checkstyle/ant/checkstyle-ant-task.properties"
			classpath="${checkstyle-jar}"/>
		<checkstyle config="${lib-dir}/checks.xml" failOnViolation="false">
			<fileset dir="${src-dir}" includes="**/*.java" />
			<formatter type="plain" usefile="false" />
		</checkstyle>
	</target>
	
	<target name="compile">
		<javac srcdir="${src-dir}" verbose="false" destdir="${bin-dir}">
			<classpath refid="classpath.test" />
		</javac>
		<copy todir="${bin-dir}">
			<fileset dir="${src-dir}" excludes="**/*.java" />
		</copy>
	</target>
	
	<!-- Please note: This is no ideal "jar" target since it does not exclude 
		test-classed. It could easily be done by splitting normal source 
		and test source folders or by using naming conventions and "exclude".
		But we want to avoid  any trouble for you that would be caused
		by multiple source folders or if a non-test-class ends on "...Test" -->
	<target name="jar" depends="compile">
		<jar destfile="${dist-dir}/${jar-name}.jar" basedir="${bin-dir}">
			<manifest>
				<attribute name="Main-Class" value="${Main-class}" />
			</manifest>
		</jar>
	</target>
	
	<target name="clean">
		<delete verbose="true">
			<fileset dir="${bin-dir}" includes="**/*.class" />
			<fileset dir="${dist-dir}" includes="${jar-name}.jar" />
		</delete>
	</target>
	
	<target name="test" depends="compile">
		<junit fork="yes" dir="${dist-dir}">
			<classpath refid="classpath.test" />
			<batchtest>
				<formatter type="plain" usefile="false" />
				<fileset dir="${src-dir}">
					<include name="**/*Test.java" />
				</fileset>
			</batchtest>
		</junit>
	</target>
	
	<target name="all" depends="checkstyle,test,jar" />
</project>